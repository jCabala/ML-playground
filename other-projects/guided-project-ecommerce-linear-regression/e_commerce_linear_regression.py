# -*- coding: utf-8 -*-
"""E-Commerce-Linear-Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X8tUxNGT5__W4HUiFvPQRw6pY1PqV35t
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("./ecommerce.csv")

df.head()

df.info()

df.describe()

# EDA
X_col_names = df.columns[3:7]
y_col_name = df.columns[7]

for X_col_name in X_col_names:
  sns.jointplot(x=X_col_name, y=y_col_name, data=df, alpha=0.5)

sns.pairplot(df, kind="scatter", plot_kws={ "alpha":0.4 })

sns.lmplot(x = X_col_names[-1],
           y = y_col_name,
           data = df,
           scatter_kws={ "alpha":0.4 })

from sklearn.model_selection import train_test_split

X = df[X_col_names]
y = df[y_col_name]

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.3, random_state=42)

# Training the model

from sklearn.linear_model import LinearRegression

lm = LinearRegression()

lm.fit(X_train, y_train)

list(zip(X_col_names, lm.coef_))

predictions = lm.predict(X_test)
predictions[:10 ]

sns.scatterplot(x=predictions, y=y_test)
plt.xlabel("Predictions")

from sklearn.metrics import mean_squared_error, mean_absolute_error

print("Mean Absolute Error: ", mean_absolute_error(y_test, predictions))
print("Mean Squared Error: ", mean_squared_error(y_test, predictions))
print("RMSE: ", mean_squared_error(y_test, predictions, squared=False))

# Residules
# If residuals are not random then your model is biased

residuals = y_test - predictions
residuals

sns.displot(residuals, bins=30, kde=True)

import pylab
import scipy.stats as stats

stats.probplot(residuals, dist="norm", plot=pylab)

