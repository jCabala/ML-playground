import numpy as np
import pandas as pd

import matplotlib
import matplotlib.pyplot as plt
matplotlib.use('Agg')

from sklearn.datasets import load_digits
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.pipeline import Pipeline
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

digits = load_digits()
X = digits.data
y = digits.target

# Displaying the first instance as an image
some_digit = X[8].reshape(8,8)
plt.imshow(some_digit, cmap="gray")
plt.savefig("./some_digit.png")
plt.clf()

# Splitting the set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,
                                                    random_state=0)

# Creating a pipeline
pipeline = Pipeline([('scaler', StandardScaler()), 
                     ('pca', PCA(n_components=0.95)),
                     ('svm', SVC(random_state=0))])

# Searching for the best params
params = {'svm__C': [1, 5, 8, 10],
          'svm__kernel': ['linear', 'poly', 'rbf', 'sigmoid']}
grid_search = GridSearchCV(pipeline, params)
grid_search.fit(X_train, y_train)

print(f"""Grid search completed.
Best score was: {grid_search.best_score_},
generated by params: {grid_search.best_params_}""")

# Evaluating accuracy on the thest set
y_pred = grid_search.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"accuracy on the test set is: {accuracy}")